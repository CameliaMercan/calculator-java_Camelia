Metrica LOC: Pentru metrica LOC am calculat in doua moduri:

1. Am luat in calcul doar liniile de cod(excluzand liniile cu comentarii si cele goale)

      Fisier Calculator.java
        Linii de cod: 77

      Fisier: Start.java
         Linii de cod: 20

      Metrica LOC Colectiv:
        Total: 77 (Calculator.java) + 20 (Start.java) = 97 linii de cod

2. Am luat in calcul toate liniile de cod(inclusiv cele cu comentarii sau goale)

      Fisier Calculator.java
        Linii de cod: 124

      Fisier: Start.java
         Linii de cod: 39

      Metrica LOC Colectiv:
          Total: 124 (Calculator.java) + 39 (Start.java) = 163 linii de cod


Metoda evaluateExpression pentru: calculator.java:
      1. Complexitatea ciclomatica: 6
      2. Complexitatea cognitiva: Moderat

Metoda Calculate pentru: calculator.java
      1. Complexitatea ciclomatica: 10
      2. Complexitatea cognitiva: Ridicata

Metoda evaluateExpression pentru: start.java:
      1. Complexitatea ciclomatica: 6
      2. Complexitatea cognitiva: Moderat

Metoda Calculate pentru: start.java
      1. Complexitatea ciclomatica: 10
      2. Complexitatea cognitiva: Ridicata



''√Ånaliza informala a codului''

Linia 5: static float finalResult; - Variabilele de tip float sunt sensibile la erori calculele aritmetice, mai ales cand sunt folosite in bucle sau alte operatii repetitive. Ar fi mai sigur sa se utilizeze double.
Linia 10: static class Operations - Nu este clar de ce clasa Operations este statica incorporata in Calculator. S-ar putea lua in considerare mutarea acestei clase in afara clasei Calculator sau transformarea sa intr-o clasa non-statica.
Linia 18: public static String ToString() - Numele metodei (ToString) nu respecta conventiile de denumire Java, care ar trebui sa fie toString().
Linia 33: for (int i = 0; i < expression.length() - Este mai sigur sa fie i < expression.length() pentru a evita depasirea limitelor.
Linia 44: for (int i = 0; i < numbers.length; i++) - Aici, s-ar putea folosi i < numbers.length in loc de i < numbers.length - 1.
Linia 51: try { numberList.add(Float.parseFloat(numbers[i])); } catch (Exception exc) { return "ERROR"; } - Capturarea oricarei exceptii fara afisarea unui mesaj de eroare poate ascunde problemele din cod si poate face debugging-ul dificil.




